{
  "nodes": [
    {
      "nodeId": "pluginInput",
      "name": "自定义插件输入",
      "intro": "可以配置插件需要哪些输入，利用这些输入来运行插件",
      "avatar": "core/workflow/template/workflowStart",
      "flowNodeType": "pluginInput",
      "showStatus": false,
      "position": {
        "x": -219.6824105687828,
        "y": -101.77531175072627
      },
      "version": "481",
      "inputs": [
        {
          "renderTypeList": [
            "textarea"
          ],
          "selectedTypeIndex": 0,
          "valueType": "string",
          "canEdit": true,
          "key": "task",
          "label": "task",
          "description": "需要执行的任务",
          "required": true,
          "defaultValue": "翻译外文文本"
        },
        {
          "renderTypeList": [
            "textarea"
          ],
          "selectedTypeIndex": 0,
          "valueType": "string",
          "canEdit": true,
          "key": "prompt_example",
          "label": "prompt_example",
          "description": "提示词示例",
          "required": true,
          "defaultValue": "Sealos is a cloud operating system distribution based on the Kubernetes kernel. It adopts a cloud-native approach, discarding traditional cloud computing architecture, and shifting towards a new architecture with Kubernetes as the cloud kernel. This allows enterprises to use the cloud as effortlessly as they would use a personal computer.\n\nUsers will be able to install any high-availability distributed application on Kubernetes with the click of a button, similar to using a personal computer. It practically requires no professional delivery or operational costs. Simultaneously, utilizing unique cluster imaging capabilities, users can package any distributed application into an OCI image, freely combine a variety of distributed applications, and easily customize their desired cloud. The powerful and flexible app store function can meet the diverse needs of various users."
        },
        {
          "renderTypeList": [
            "textarea"
          ],
          "selectedTypeIndex": 0,
          "valueType": "string",
          "canEdit": true,
          "key": "response_example",
          "label": "response_example",
          "description": "AI 回复示例",
          "required": true,
          "defaultValue": "Sealos 是一款以 Kubernetes 为内核的云操作系统发行版。它以云原生的方式，抛弃了传统的云计算架构，转向以 Kubernetes 为云内核的新架构，使企业能够像使用个人电脑一样简单地使用云。\n\n用户将可以像使用个人电脑一样在 Kubernetes 上一键安装任意高可用分布式应用，几乎不需要任何专业的交付和运维成本。同时，利用独特的集群镜像能力，用户可将任意分布式应用打包成 OCI 镜像，自由组合各种分布式应用，轻松订制所需的云。通过强大且灵活的应用商店功能，可满足各类用户的多样化需求。"
        }
      ],
      "outputs": [
        {
          "id": "task",
          "valueType": "string",
          "key": "task",
          "label": "task",
          "type": "hidden"
        },
        {
          "id": "prompt_example",
          "valueType": "string",
          "key": "prompt_example",
          "label": "prompt_example",
          "type": "hidden"
        },
        {
          "id": "response_example",
          "valueType": "string",
          "key": "response_example",
          "label": "response_example",
          "type": "hidden"
        }
      ]
    },
    {
      "nodeId": "pluginOutput",
      "name": "自定义插件输出",
      "intro": "自定义配置外部输出，使用插件时，仅暴露自定义配置的输出",
      "avatar": "core/workflow/template/pluginOutput",
      "flowNodeType": "pluginOutput",
      "showStatus": false,
      "position": {
        "x": 2588.698874413269,
        "y": -37.73399941782753
      },
      "version": "481",
      "inputs": [
        {
          "renderTypeList": [
            "reference"
          ],
          "valueType": "chatHistory",
          "canEdit": true,
          "key": "问答示例",
          "label": "问答示例",
          "description": "高性能 AI 的问答示例",
          "value": [
            "kGZBVzwZJvRr",
            "sFzDC79CgJjR"
          ]
        }
      ],
      "outputs": []
    },
    {
      "nodeId": "vvDMOt1OJVpO",
      "name": "生成提示词和回答例子",
      "intro": "AI 大模型对话",
      "avatar": "core/workflow/template/aiChat",
      "flowNodeType": "chatNode",
      "showStatus": true,
      "position": {
        "x": 389.6070084022975,
        "y": -390.1563503559081
      },
      "version": "481",
      "inputs": [
        {
          "key": "model",
          "renderTypeList": [
            "settingLLMModel",
            "reference"
          ],
          "label": "core.module.input.label.aiModel",
          "valueType": "string",
          "selectedTypeIndex": 0,
          "value": "claude-3-5-sonnet-20240620"
        },
        {
          "key": "temperature",
          "renderTypeList": [
            "hidden"
          ],
          "label": "",
          "value": 0,
          "valueType": "number",
          "min": 0,
          "max": 10,
          "step": 1
        },
        {
          "key": "maxToken",
          "renderTypeList": [
            "hidden"
          ],
          "label": "",
          "value": 2000,
          "valueType": "number",
          "min": 100,
          "max": 4000,
          "step": 50
        },
        {
          "key": "isResponseAnswerText",
          "renderTypeList": [
            "hidden"
          ],
          "label": "",
          "value": false,
          "valueType": "boolean"
        },
        {
          "key": "quoteTemplate",
          "renderTypeList": [
            "hidden"
          ],
          "label": "",
          "valueType": "string"
        },
        {
          "key": "quotePrompt",
          "renderTypeList": [
            "hidden"
          ],
          "label": "",
          "valueType": "string"
        },
        {
          "key": "systemPrompt",
          "renderTypeList": [
            "textarea",
            "reference"
          ],
          "max": 3000,
          "valueType": "string",
          "label": "core.ai.Prompt",
          "description": "core.app.tip.chatNodeSystemPromptTip",
          "placeholder": "core.app.tip.chatNodeSystemPromptTip",
          "value": "## Task:\nGiven an example training sample, create 7 additional samples for the same task that are even better. Each example should contain a <prompt> and a <response>.\n\n## Rules:\n1. Ensure the new examples are diverse and unique from one another.\n2. They should all be perfect. If you make a mistake, this system won't work.\n\n## OutputFormat:\n<example_one>\n<prompt>\nPUT_PROMPT_HERE\n</prompt>\n<response>\nPUT_RESPONSE_HERE\n</response>\n</example_one>\n\n<example_two>\n<prompt>\nPUT_PROMPT_HERE\n</prompt>\n<response>\nPUT_RESPONSE_HERE\n</response>\n</example_two>\n"
        },
        {
          "key": "history",
          "renderTypeList": [
            "numberInput",
            "reference"
          ],
          "valueType": "chatHistory",
          "label": "core.module.input.label.chat history",
          "description": "最多携带多少轮对话记录",
          "required": true,
          "min": 0,
          "max": 50,
          "value": 6
        },
        {
          "key": "userChatInput",
          "renderTypeList": [
            "reference",
            "textarea"
          ],
          "valueType": "string",
          "label": "用户问题",
          "required": true,
          "toolDescription": "用户问题",
          "selectedTypeIndex": 1,
          "value": "<training_task>\n{{$pluginInput.task$}}\n</training_task>\n\n<prompt_example>\n{{$pluginInput.prompt_example$}}\n</prompt_example>\n\n<response_example>\n{{$pluginInput.response_example$}}\n</response_example>"
        },
        {
          "key": "quoteQA",
          "renderTypeList": [
            "settingDatasetQuotePrompt"
          ],
          "label": "",
          "debugLabel": "知识库引用",
          "description": "",
          "valueType": "datasetQuote"
        }
      ],
      "outputs": [
        {
          "id": "history",
          "key": "history",
          "required": true,
          "label": "core.module.output.label.New context",
          "description": "core.module.output.description.New context",
          "valueType": "chatHistory",
          "type": "static"
        },
        {
          "id": "answerText",
          "key": "answerText",
          "required": true,
          "label": "core.module.output.label.Ai response content",
          "description": "core.module.output.description.Ai response content",
          "valueType": "string",
          "type": "static"
        }
      ]
    },
    {
      "nodeId": "kGZBVzwZJvRr",
      "name": "生成聊天记录",
      "intro": "执行一段简单的脚本代码，通常用于进行复杂的数据处理。",
      "avatar": "core/workflow/template/codeRun",
      "flowNodeType": "code",
      "showStatus": true,
      "position": {
        "x": 1917.9673096589154,
        "y": -368.753298042259
      },
      "version": "482",
      "inputs": [
        {
          "key": "system_addInputParam",
          "renderTypeList": [
            "addInputParam"
          ],
          "valueType": "dynamic",
          "label": "",
          "required": false,
          "description": "这些变量会作为代码的运行的输入参数",
          "customInputConfig": {
            "selectValueTypeList": [
              "string",
              "number",
              "boolean",
              "object",
              "arrayString",
              "arrayNumber",
              "arrayBoolean",
              "arrayObject",
              "any",
              "chatHistory",
              "datasetQuote",
              "dynamic",
              "selectApp",
              "selectDataset"
            ],
            "showDescription": false,
            "showDefaultValue": true
          }
        },
        {
          "key": "codeType",
          "renderTypeList": [
            "hidden"
          ],
          "label": "",
          "value": "js"
        },
        {
          "key": "code",
          "renderTypeList": [
            "custom"
          ],
          "label": "",
          "value": "function main({promptAndResponseExamples, systemPrompt}){\n    const promptsAndResponses = [];\n    const examplePattern = /<example_\\w+>(.*?)<\\/example_\\w+>/gs;\n    const promptPattern = /<prompt>(.*?)<\\/prompt>/s;\n    const responsePattern = /<response>(.*?)<\\/response>/s;\n\n    let exampleMatch;\n    while ((exampleMatch = examplePattern.exec(promptAndResponseExamples)) !== null) {\n        const exampleContent = exampleMatch[1];\n        const promptMatch = promptPattern.exec(exampleContent);\n        const responseMatch = responsePattern.exec(exampleContent);\n\n        if (promptMatch && responseMatch) {\n            const prompt = promptMatch[1].trim();\n            const response = responseMatch[1].trim();\n            promptsAndResponses.push({ prompt, response });\n        }\n    }\n    \n    const chatHistory = [\n        {\n            \"obj\": \"System\",\n            \"value\": [\n                {\n                    \"type\": \"text\",\n                    \"text\": {\n                        \"content\": systemPrompt.replace(/^<system_prompt>\\n|\\n<\\/system_prompt>$/g, '')\n                    }\n                }\n            ]\n        },\n        ...promptsAndResponses.map(({prompt, response}) => [\n            {\n                \"obj\": \"Human\",\n                \"value\": [\n                    {\n                        \"type\": \"text\",\n                        \"text\": {\n                            \"content\": prompt\n                        }\n                    }\n                ]\n            },\n            {\n                \"obj\": \"AI\",\n                \"value\": [\n                    {\n                        \"type\": \"text\",\n                        \"text\": {\n                            \"content\": response\n                        }\n                    }\n                ]\n            }\n        ]).flat()\n    ];\n\n    return {\n        chatHistory\n    };\n}\n"
        },
        {
          "renderTypeList": [
            "reference"
          ],
          "valueType": "string",
          "canEdit": true,
          "key": "promptAndResponseExamples",
          "label": "promptAndResponseExamples",
          "customInputConfig": {
            "selectValueTypeList": [
              "string",
              "number",
              "boolean",
              "object",
              "arrayString",
              "arrayNumber",
              "arrayBoolean",
              "arrayObject",
              "any",
              "chatHistory",
              "datasetQuote",
              "dynamic",
              "selectApp",
              "selectDataset"
            ],
            "showDescription": false,
            "showDefaultValue": true
          },
          "required": true,
          "value": [
            "vvDMOt1OJVpO",
            "answerText"
          ]
        },
        {
          "renderTypeList": [
            "reference"
          ],
          "valueType": "string",
          "canEdit": true,
          "key": "systemPrompt",
          "label": "systemPrompt",
          "customInputConfig": {
            "selectValueTypeList": [
              "string",
              "number",
              "boolean",
              "object",
              "arrayString",
              "arrayNumber",
              "arrayBoolean",
              "arrayObject",
              "any",
              "chatHistory",
              "datasetQuote",
              "dynamic",
              "selectApp",
              "selectDataset"
            ],
            "showDescription": false,
            "showDefaultValue": true
          },
          "required": true,
          "value": [
            "agJb9pvuJCKl",
            "answerText"
          ]
        }
      ],
      "outputs": [
        {
          "id": "system_rawResponse",
          "key": "system_rawResponse",
          "label": "完整响应数据",
          "valueType": "object",
          "type": "static"
        },
        {
          "id": "error",
          "key": "error",
          "label": "运行错误",
          "description": "代码运行错误信息，成功时返回空",
          "valueType": "object",
          "type": "static"
        },
        {
          "id": "system_addOutputParam",
          "key": "system_addOutputParam",
          "type": "dynamic",
          "valueType": "dynamic",
          "label": "",
          "customFieldConfig": {
            "selectValueTypeList": [
              "string",
              "number",
              "boolean",
              "object",
              "arrayString",
              "arrayNumber",
              "arrayBoolean",
              "arrayObject",
              "any",
              "chatHistory",
              "datasetQuote",
              "dynamic",
              "selectApp",
              "selectDataset"
            ],
            "showDescription": false,
            "showDefaultValue": false
          },
          "description": "将代码中 return 的对象作为输出，传递给后续的节点。变量名需要对应 return 的 key"
        },
        {
          "id": "sFzDC79CgJjR",
          "valueType": "chatHistory",
          "type": "dynamic",
          "key": "chatHistory",
          "label": "chatHistory"
        }
      ]
    },
    {
      "nodeId": "agJb9pvuJCKl",
      "name": "生成系统提示词",
      "intro": "AI 大模型对话",
      "avatar": "core/workflow/template/aiChat",
      "flowNodeType": "chatNode",
      "showStatus": true,
      "position": {
        "x": 1166.5280665265466,
        "y": -391.87506915222184
      },
      "version": "481",
      "inputs": [
        {
          "key": "model",
          "renderTypeList": [
            "settingLLMModel",
            "reference"
          ],
          "label": "core.module.input.label.aiModel",
          "valueType": "string",
          "selectedTypeIndex": 0,
          "value": "claude-3-5-sonnet-20240620"
        },
        {
          "key": "temperature",
          "renderTypeList": [
            "hidden"
          ],
          "label": "",
          "value": 0,
          "valueType": "number",
          "min": 0,
          "max": 10,
          "step": 1
        },
        {
          "key": "maxToken",
          "renderTypeList": [
            "hidden"
          ],
          "label": "",
          "value": 2000,
          "valueType": "number",
          "min": 100,
          "max": 4000,
          "step": 50
        },
        {
          "key": "isResponseAnswerText",
          "renderTypeList": [
            "hidden"
          ],
          "label": "",
          "value": false,
          "valueType": "boolean"
        },
        {
          "key": "quoteTemplate",
          "renderTypeList": [
            "hidden"
          ],
          "label": "",
          "valueType": "string"
        },
        {
          "key": "quotePrompt",
          "renderTypeList": [
            "hidden"
          ],
          "label": "",
          "valueType": "string"
        },
        {
          "key": "systemPrompt",
          "renderTypeList": [
            "textarea",
            "reference"
          ],
          "max": 3000,
          "valueType": "string",
          "label": "core.ai.Prompt",
          "description": "core.app.tip.chatNodeSystemPromptTip",
          "placeholder": "core.app.tip.chatNodeSystemPromptTip",
          "value": "## Role:\nGiven a user-description of their <task> a set of prompt / response pairs (it'll be in JSON for easy reading) for the types of outputs we want to generate given inputs, write a fantastic system prompt that describes the task to be done perfectly.\n\n## Rules:\n1. Do this perfectly.\n2. Respond only with the system prompt, and nothing else. No other text will be allowed.\n\n## OutputFormat:\n<system_prompt>\nWRITE_SYSTEM_PROMPT_HERE\n</system_prompt>"
        },
        {
          "key": "history",
          "renderTypeList": [
            "numberInput",
            "reference"
          ],
          "valueType": "chatHistory",
          "label": "core.module.input.label.chat history",
          "description": "最多携带多少轮对话记录",
          "required": true,
          "min": 0,
          "max": 50,
          "value": 6
        },
        {
          "key": "userChatInput",
          "renderTypeList": [
            "reference",
            "textarea"
          ],
          "valueType": "string",
          "label": "用户问题",
          "required": true,
          "toolDescription": "用户问题",
          "selectedTypeIndex": 1,
          "value": "<task>\n{{$pluginInput.task$}}\n</task>\n\n<prompt_response_examples>\n{{$vvDMOt1OJVpO.answerText$}}\n</prompt_response_examples>"
        },
        {
          "key": "quoteQA",
          "renderTypeList": [
            "settingDatasetQuotePrompt"
          ],
          "label": "",
          "debugLabel": "知识库引用",
          "description": "",
          "valueType": "datasetQuote"
        }
      ],
      "outputs": [
        {
          "id": "history",
          "key": "history",
          "required": true,
          "label": "core.module.output.label.New context",
          "description": "core.module.output.description.New context",
          "valueType": "chatHistory",
          "type": "static"
        },
        {
          "id": "answerText",
          "key": "answerText",
          "required": true,
          "label": "core.module.output.label.Ai response content",
          "description": "core.module.output.description.Ai response content",
          "valueType": "string",
          "type": "static"
        }
      ]
    }
  ],
  "edges": [
    {
      "source": "pluginInput",
      "target": "vvDMOt1OJVpO",
      "sourceHandle": "pluginInput-source-right",
      "targetHandle": "vvDMOt1OJVpO-target-left"
    },
    {
      "source": "vvDMOt1OJVpO",
      "target": "agJb9pvuJCKl",
      "sourceHandle": "vvDMOt1OJVpO-source-right",
      "targetHandle": "agJb9pvuJCKl-target-left"
    },
    {
      "source": "agJb9pvuJCKl",
      "target": "kGZBVzwZJvRr",
      "sourceHandle": "agJb9pvuJCKl-source-right",
      "targetHandle": "kGZBVzwZJvRr-target-left"
    },
    {
      "source": "kGZBVzwZJvRr",
      "target": "pluginOutput",
      "sourceHandle": "kGZBVzwZJvRr-source-right",
      "targetHandle": "pluginOutput-target-left"
    }
  ]
}